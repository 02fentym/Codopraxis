# Generated by Django 5.2.5 on 2025-08-22 13:14

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CodeQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('standard_io', 'Standard I/O'), ('function', 'Function'), ('oop', 'OOP')], max_length=20)),
                ('prompt', models.TextField()),
                ('timeout_seconds', models.PositiveIntegerField(default=5)),
                ('memory_limit_mb', models.PositiveIntegerField(default=128)),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='code_questions', to='base.topic')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='StandardIOQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tests_json', models.JSONField(help_text='Author-provided test cases JSON (stdin/stdout pairs).')),
                ('starter_code', models.TextField(blank=True)),
                ('code_question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='standard_io', to='codequestions.codequestion')),
            ],
            options={
                'verbose_name': 'Standard I/O Question',
                'verbose_name_plural': 'Standard I/O Questions',
            },
        ),
        migrations.CreateModel(
            name='FunctionOOPQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_framework', models.CharField(choices=[('unittest', 'unittest'), ('pytest', 'pytest'), ('junit', 'JUnit')], help_text='e.g., unittest/pytest for Python; JUnit for Java.', max_length=20)),
                ('test_code', models.TextField(help_text='Author-written test harness in the chosen language/framework.')),
                ('starter_code', models.TextField(blank=True)),
                ('entrypoint_hint', models.CharField(blank=True, help_text='Expected function/class name or entry point description.', max_length=200)),
                ('runner_meta', models.JSONField(blank=True, help_text='Optional execution hints for the sandbox (file layout, args, env).', null=True)),
                ('code_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='function_oop_questions', to='codequestions.codequestion')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='function_oop_questions', to='base.language')),
            ],
            options={
                'verbose_name': 'Function/OOP Language Spec',
                'verbose_name_plural': 'Function/OOP Language Specs',
                'constraints': [models.UniqueConstraint(fields=('code_question', 'language'), name='uq_codequestion_language_once')],
            },
        ),
    ]
